{"ts":1346696396683,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n<div class=\"step container container-center\">\n    \n    <img src=\"http://placehold.it/256x256\" alt=\"\" class=\"iconk\">\n    <h1 class=\"superhero-type\">Flexibility</h1>\n    <h2 class=\"sidekick-type\">is the key to accessible information</h2>\n    \n</div>\n\n<!--\n\nFlexibility is the key to accessible information\n\nThink about the space available to a website\n\nOur devices have fixed size screens and here the space is limited\n\nUser interface design gives us scroll bars and with these space is unlimited\n\nHowever, on the web we begin at a middle ground\n\nWe stay within the horizontal space of the screen and expand vertically\n\nMore uncommonly, we stay within the vertical space of the screen and expand horizontally\n\nAnd rarely, we expand in both directions\n\nAny of these experiences is quite unlike any printed material\n\nWe still begin with a grid, but the difference is crucial: a web grid must be flexible where a print grid is predefined\n\nGrids are arguably the most important aspect of design, and no where is this more true than on the web\n\nA book cares nothing for different sizes and the reader must adapt to it\n\nBut a website, it adapts to be accessible to the user, whether viewed on a desktop or phone\n\nHowever, checking for mobile, desktop, or browser is fools-gold\n\nTechnology changes so quickly that any device or browser could suddenly change support for a feature\n\nChecking for feature support is much more stable\n\nTo create stable grids for all devices, use CSS @media queries\n\nA @media query defines set of rules that will take effect during a page state\n\nA @media query takes the form of “@media state1 and state2 and...”\n\nEach @media query state is a phrase such as “screen” or “print”\n\nBut how do we detect desktop vs mobile without detecting the device itself?\n\nDesktop devices have large screen sizes, between 768px and 1600px width\n\nTablet devices have medium screen sizes, up to 768px width in portrait mode\n\nPhones have small screen sizes, up to 480px maximum width in landscape mode\n\nA @media query can detect screen sizes using the state phrases “min-” and “max-”\n\nThe min- states takes the form of “min-dimension(size)”\n\nThe max- states takes the form of “max-dimension(size)”\n\nFor example, to detect a phone use: @media max-width(480px)\n\nFor example, to detect a tablet use: @media max-width(767px)\n\nFor example, to detect a small desktop use: @media min-width(768px) and max-width(979px)\n\nFor example, to detect a large desktop use: @media min-width(1200px)\n\nWith these @media queries, we can define new css rules for each screen size\n\nRemember, small screen sizes are much more friendly to larger sizes and vertical layouts!\n\nFor phones and small tablets, consider changing the page into a simple vertical stack with 20 px font-size\n\nTo change a row/column grid into a vertical stack:\n1. Set columns float properties to none\n2. Set columns display to block\n3. Set columns width to auto or 100%\n4. Set row & column margins to 0\n\nIn the case that a page must retain the grid, use a fluid grid with % widths instead of px widths for universal support across screen sizes\n\n-->"]],"start1":0,"start2":0,"length1":0,"length2":3096}]],"length":3096}
